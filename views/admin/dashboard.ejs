<%- include('../partials/header') %>

<div class="container">
  <div class="admin-dashboard">
    <h1>Admin Dashboard</h1>
    
    <div class="stats-grid">
      <div class="stat-card">
        <h3>Total Users</h3>
        <p class="stat-value"><%= stats.totalUsers %></p>
      </div>
      <div class="stat-card">
        <h3>Active Users</h3>
        <p class="stat-value"><%= stats.activeUsers %></p>
      </div>
      <div class="stat-card">
        <h3>Users Online Today</h3>
        <p class="stat-value"><%= stats.onlineToday %></p>
      </div>
    </div>

    <% if (user.email === 'admin@test.com') { %>
      <div class="admin-actions">
        <button onclick="openNewAdminModal()" class="btn btn-primary">
          <i class="fas fa-user-shield"></i> Add New Admin
        </button>
      </div>
    <% } %>

    <div class="users-section">
      <h2>User Management</h2>
      <table class="users-table">
        <thead>
          <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Status</th>
            <th>Last Login</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% users.forEach(user => { %>
            <tr>
              <td><%= user.name %></td>
              <td><%= user.email %></td>
              <td>
                <span class="status-badge <%= user.status %>">
                  <%= user.status %>
                </span>
              </td>
              <td><%= user.lastLogin ? new Date(user.lastLogin).toLocaleString() : 'Never' %></td>
              <td>
                <button onclick="openUserModal('<%= user._id %>')" class="btn-icon">
                  <i class="fas fa-edit"></i> Manage
                </button>
              </td>
            </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- User Management Modal -->
<div id="userModal" class="modal-overlay">
  <div class="modal-wrapper">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Manage User</h2>
        <button class="close-modal">&times;</button>
      </div>
      <div class="modal-body">
        <form id="userManagementForm">
          <input type="hidden" id="userId" name="userId">
          
          <div class="form-group">
            <label for="userName">Name</label>
            <input type="text" id="userName" name="name" class="form-control">
          </div>
          
          <div class="form-group">
            <label for="userEmail">Email</label>
            <input type="email" id="userEmail" name="email" class="form-control">
          </div>
          
          <div class="form-group">
            <label for="userStatus">Status</label>
            <select id="userStatus" name="status" class="form-control">
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
              <option value="suspended">Suspended</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="newPassword">Reset Password</label>
            <input type="password" id="newPassword" name="newPassword" class="form-control" placeholder="Leave blank to keep current password">
          </div>

          <div class="button-group">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <button type="button" class="btn btn-danger" onclick="confirmDeleteUser()">Delete User</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Add New Admin Modal -->
<% if (user.email === 'admin@test.com') { %>
  <div id="newAdminModal" class="modal-overlay">
    <div class="modal-wrapper">
      <div class="modal-content">
        <div class="modal-header">
          <h2>Add New Admin</h2>
          <button class="close-modal" onclick="closeNewAdminModal()">&times;</button>
        </div>
        <div class="modal-body">
          <form id="newAdminForm">
            <div class="form-group">
              <label for="adminName">Admin Name</label>
              <input type="text" id="adminName" name="name" class="form-control" required>
            </div>
            
            <div class="form-group">
              <label for="adminEmail">Admin Email</label>
              <input type="email" id="adminEmail" name="email" class="form-control" required>
            </div>
            
            <div class="form-group">
              <label for="adminPassword">Password</label>
              <input type="password" id="adminPassword" name="password" class="form-control" required>
            </div>

            <div class="button-group">
              <button type="submit" class="btn btn-primary">Create Admin</button>
              <button type="button" class="btn btn-secondary" onclick="closeNewAdminModal()">Cancel</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
<% } %>

<style>
.modal-overlay {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  z-index: 1000;
  justify-content: center;
  align-items: center;
}

.modal-wrapper {
  width: 100%;
  max-width: 600px;
  margin: 2rem;
  position: relative;
}

.modal-content {
  background: white;
  padding: 2rem;
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  width: 100%;
  max-height: calc(100vh - 4rem);
  overflow-y: auto;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.close-modal {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0.5rem;
  color: var(--text-color);
  opacity: 0.7;
  transition: opacity 0.2s;
}

.close-modal:hover {
  opacity: 1;
}

.modal-body {
  padding: 1rem 0;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
}

.form-control {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  font-size: 1rem;
}

.button-group {
  display: flex;
  gap: 1rem;
  margin-top: 2rem;
}

.btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: var(--border-radius);
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s ease;
}

.btn-primary {
  background: var(--primary-color);
  color: white;
}

.btn-danger {
  background: #dc3545;
  color: white;
}

.btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

@media (max-width: 640px) {
  .modal-wrapper {
    margin: 1rem;
  }
  
  .modal-content {
    padding: 1.5rem;
  }
  
  .button-group {
    flex-direction: column;
  }
}

.users-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

.users-table th,
.users-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid var(--border-color);
}

.status-badge {
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 0.8em;
}

.status-badge.active {
  background: #28a745;
  color: white;
}

.status-badge.inactive {
  background: #dc3545;
  color: white;
}

.status-badge.suspended {
  background: #ffc107;
  color: black;
}

.admin-actions {
  margin: 2rem 0;
  padding: 1rem;
  background: var(--card-bg);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
}

.btn-primary {
  background: var(--primary-color);
  color: white;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: var(--border-radius);
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 500;
  transition: all 0.3s ease;
}

.btn-primary:hover {
  background: var(--primary-light);
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.btn-primary i {
  font-size: 1.1rem;
}
</style>

<script>
function openUserModal(userId) {
  const modal = document.getElementById('userModal');
  modal.style.display = 'flex';
  
  fetch(`/admin/users/${userId}`)
    .then(response => response.json())
    .then(user => {
      document.getElementById('userId').value = user._id;
      document.getElementById('userName').value = user.name;
      document.getElementById('userEmail').value = user.email;
      document.getElementById('userStatus').value = user.status;
      document.getElementById('newPassword').value = '';
    })
    .catch(error => {
      console.error('Error fetching user details:', error);
      alert('Error loading user details');
    });
}

document.querySelector('.close-modal').onclick = function() {
  document.getElementById('userModal').style.display = 'none';
}

document.getElementById('userManagementForm').onsubmit = async function(e) {
  e.preventDefault();
  const userId = document.getElementById('userId').value;
  
  try {
    const formData = new FormData(e.target);
    const response = await fetch(`/admin/users/${userId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(Object.fromEntries(formData))
    });
    
    if (!response.ok) throw new Error('Failed to update user');
    
    location.reload();
  } catch (error) {
    console.error('Error updating user:', error);
    alert('Error updating user');
  }
}

async function confirmDeleteUser() {
  if (!confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
    return;
  }
  
  const userId = document.getElementById('userId').value;
  
  try {
    const response = await fetch(`/admin/users/${userId}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) throw new Error('Failed to delete user');
    
    location.reload();
  } catch (error) {
    console.error('Error deleting user:', error);
    alert('Error deleting user');
  }
}

document.getElementById('userModal').onclick = function(event) {
  if (event.target === this) {
    this.style.display = 'none';
  }
}

document.querySelector('.modal-content').onclick = function(event) {
  event.stopPropagation();
}

function openNewAdminModal() {
  document.getElementById('newAdminModal').style.display = 'flex';
}

function closeNewAdminModal() {
  document.getElementById('newAdminModal').style.display = 'none';
}

document.getElementById('newAdminForm')?.addEventListener('submit', async function(e) {
  e.preventDefault();
  
  try {
    const formData = new FormData(e.target);
    const response = await fetch('/admin/create-admin', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(Object.fromEntries(formData))
    });
    
    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(result.error || 'Failed to create admin');
    }
    
    alert('Admin created successfully');
    location.reload();
  } catch (error) {
    console.error('Error creating admin:', error);
    alert(error.message || 'Error creating admin');
  }
});

// Close modal when clicking outside
document.getElementById('newAdminModal').onclick = function(event) {
  if (event.target === this) {
    closeNewAdminModal();
  }
}
</script>

<%- include('../partials/footer') %> 