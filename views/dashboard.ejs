<!DOCTYPE html>
<html>
<head>
  <title>KeyAdjusting Portal - Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <link rel="stylesheet" href="/css/main.css">
</head>
<body>
  <nav class="navbar">
    <div class="navbar-content">
      <div class="navbar-left">
        <h1 class="portal-title">Key Adjusting <span>Contractor Portal</span></h1>
        <div class="user-nav-info">
          <span class="nav-info-item"><i class="fas fa-id-badge"></i> <%= user.contractorId %></span>
          <span class="nav-info-item"><i class="fas fa-user"></i> <%= user.name %></span>
        </div>
      </div>
      <div class="nav-links">
        <a href="/auth/logout" class="btn btn-outline">Logout</a>
      </div>
    </div>
  </nav>

  <!-- Add loading overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-content">
      <div class="key-animation">
        <div class="key">
          <div class="key-head"></div>
          <div class="key-shaft"></div>
          <div class="key-teeth">
            <div class="tooth"></div>
            <div class="tooth"></div>
            <div class="tooth"></div>
          </div>
        </div>
        <div class="keyhole">
          <div class="keyhole-top"></div>
          <div class="keyhole-bottom"></div>
        </div>
      </div>
      <h2 class="loading-text">Unlocking Your Dashboard</h2>
      <div class="loading-progress">
        <div class="progress-bar">
          <div id="progressFill" class="progress-fill"></div>
        </div>
        <p id="progressText" class="loading-subtext">Loading claims... 0%</p>
      </div>
    </div>
  </div>

  <div id="dashboardContent" class="container" style="display: none;">
    <!-- Statistics Section -->
    <div class="stats-section">
      <h3><i class="fas fa-chart-pie"></i> Claims Overview</h3>
      <div class="stats-grid">
        <% 
          // Create a dynamic status count object
          const statusCounts = {};
          claims.forEach(claim => {
            const status = claim.status.status.toLowerCase();
            statusCounts[status] = (statusCounts[status] || 0) + 1;
          });
          const totalClaims = claims.length;
        %>
        
        <% Object.entries(statusCounts).forEach(([status, count]) => { %>
          <div class="stat-card <%= status.toLowerCase() %>" onclick="filterClaimsByStatus('<%= status.toLowerCase() %>')">
            <span class="stat-number"><%= count %></span>
            <span class="stat-label"><%= status.charAt(0).toUpperCase() + status.slice(1) %></span>
          </div>
        <% }); %>
        
        <div class="stat-card total" onclick="filterClaimsByStatus('all')">
          <span class="stat-number"><%= totalClaims %></span>
          <span class="stat-label">Total Claims</span>
        </div>
      </div>
    </div>

    <div class="dashboard-header">
      <h1>Welcome, <%= user.name %></h1>
      <div class="dashboard-actions">
        <a href="/reports" class="btn btn-primary">
          <i class="fas fa-chart-bar"></i> Reports
        </a>
        <button onclick="refreshClaims()" class="btn btn-secondary">
          <i class="fas fa-sync-alt"></i> Refresh Claims
        </button>
      </div>
    </div>

    <div class="progress-bar-container" style="display: none;">
      <div class="progress-bar">
        <div class="progress-fill"></div>
      </div>
      <div class="progress-text">Loading claims...</div>
    </div>

    <div class="claims-container">
      <div class="claims-header">
        <h2>Claims Overview</h2>
        <div class="claims-filters">
          <div class="search-container">
            <input type="text" id="claimSearch" class="search-input" placeholder="Search claims...">
            <i class="fas fa-search search-icon"></i>
          </div>
          <select class="status-filter" id="statusFilter">
            <option value="all">All Status</option>
            <% statuses.forEach(status => { %>
              <option value="<%= status.toLowerCase() %>"><%= status %></option>
            <% }); %>
          </select>
        </div>
      </div>
      
      <!-- Replace the grid with a list view -->
      <div class="claims-list-view">
        <% claims.forEach(claim => { %>
          <a href="/claims/<%= claim.id %>" class="claim-list-item">
            <div class="claim-status-indicator" style="background-color: <%= claim.status.color %>"></div>
            <div class="claim-name"><%= claim.name %></div>
            <div class="claim-status" style="background-color: <%= claim.status.color %>">
              <%= claim.status.status.toUpperCase() %>
            </div>
            <div class="claim-id">ID: <%= claim.id %></div>
          </a>
        <% }); %>
      </div>
    </div>

    <div class="account-section">
      <button onclick="confirmDelete()" class="btn btn-danger">
        <i class="fas fa-user-times"></i> Delete My Account
      </button>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const loadingOverlay = document.querySelector('#loadingOverlay');
      const dashboardContent = document.querySelector('#dashboardContent');
      const progressFill = document.querySelector('#progressFill');
      const progressText = document.querySelector('#progressText');
      const statusFilter = document.getElementById('statusFilter');
      const claimsList = document.querySelector('.claims-list-view');
      
      // Store all original claims once on page load
      const originalClaims = Array.from(claimsList.querySelectorAll('.claim-list-item'));
      
      loadClaims();

      // Add search functionality
      const searchInput = document.getElementById('claimSearch');
      
      searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        
        // If search is empty, reset to current status filter
        if (!searchTerm) {
          // Get current status filter
          const currentStatus = statusFilter.value.toLowerCase();
          filterClaimsByStatus(currentStatus);
          return;
        }
        
        // Get current filtered claims (respecting status filter)
        const currentStatus = statusFilter.value.toLowerCase();
        
        // Clear current claims
        claimsList.innerHTML = '';
        
        // Filter by search term and current status
        let matchedClaims = 0;
        originalClaims.forEach(claim => {
          const claimName = claim.querySelector('.claim-name').textContent.toLowerCase();
          const claimStatus = claim.querySelector('.claim-status').textContent.trim().toLowerCase();
          const claimId = claim.querySelector('.claim-id')?.textContent.toLowerCase() || '';
          
          if ((currentStatus === 'all' || claimStatus === currentStatus) && 
              (claimName.includes(searchTerm) || claimId.includes(searchTerm))) {
            claimsList.appendChild(claim.cloneNode(true));
            matchedClaims++;
          }
        });
        
        // Show "no claims" message if needed
        if (matchedClaims === 0) {
          const noClaimsMsg = document.createElement('div');
          noClaimsMsg.className = 'no-claims-message';
          noClaimsMsg.textContent = `No claims found matching "${searchTerm}"`;
          claimsList.appendChild(noClaimsMsg);
        }
      });
      
      // Unified filter function that works for both dropdown and stat cards
      window.filterClaimsByStatus = function(selectedStatus) {
        // Check if the selected status is already active (toggle functionality)
        const activeCard = document.querySelector('.stat-card.active');
        const isAlreadySelected = activeCard && 
          ((selectedStatus === 'all' && activeCard.classList.contains('total')) || 
           activeCard.classList.contains(selectedStatus));
        
        // If already selected, reset to show all claims
        if (isAlreadySelected) {
          selectedStatus = 'all';
        }
        
        // Update the dropdown to match the selected status
        statusFilter.value = selectedStatus;
        
        // Clear current claims
        claimsList.innerHTML = '';
        
        // Filter and append claims
        let matchedClaims = 0;
        originalClaims.forEach(claim => {
          const claimStatus = claim
            .querySelector('.claim-status')
            .textContent.trim()
            .toLowerCase();
            
          if (selectedStatus === 'all' || claimStatus === selectedStatus) {
            claimsList.appendChild(claim.cloneNode(true));
            matchedClaims++;
          }
        });
        
        // Show "no claims" message if needed
        if (matchedClaims === 0) {
          const noClaimsMsg = document.createElement('div');
          noClaimsMsg.className = 'no-claims-message';
          noClaimsMsg.textContent = `No claims found with status: ${selectedStatus}`;
          claimsList.appendChild(noClaimsMsg);
        }
        
        // Highlight the active stat card
        document.querySelectorAll('.stat-card').forEach(card => {
          card.classList.remove('active');
        });
        
        if (selectedStatus === 'all') {
          document.querySelector('.stat-card.total').classList.add('active');
        } else {
          const activeCard = document.querySelector(`.stat-card.${selectedStatus}`);
          if (activeCard) {
            activeCard.classList.add('active');
          }
        }
        
        // After filtering by status, also apply search filter if there's a search term
        const searchTerm = searchInput.value.toLowerCase().trim();
        if (searchTerm) {
          const visibleClaims = Array.from(claimsList.querySelectorAll('.claim-list-item'));
          claimsList.innerHTML = '';
          
          let matchedClaims = 0;
          visibleClaims.forEach(claim => {
            const claimName = claim.querySelector('.claim-name').textContent.toLowerCase();
            const claimId = claim.querySelector('.claim-id').textContent.toLowerCase();
            
            if (claimName.includes(searchTerm) || claimId.includes(searchTerm)) {
              claimsList.appendChild(claim.cloneNode(true));
              matchedClaims++;
            }
          });
          
          if (matchedClaims === 0) {
            const noClaimsMsg = document.createElement('div');
            noClaimsMsg.className = 'no-claims-message';
            noClaimsMsg.textContent = `No claims found matching "${searchTerm}" with status: ${selectedStatus}`;
            claimsList.appendChild(noClaimsMsg);
          }
        }
      };
      
      // Connect the dropdown change event to our filter function
      statusFilter.addEventListener('change', function() {
        filterClaimsByStatus(this.value.toLowerCase());
      });

      async function loadClaims() {
        try {
          // Show loading overlay
          loadingOverlay.style.display = 'flex';
          dashboardContent.style.display = 'none';
          
          // Start progress animation
          progressFill.style.width = '50%';
          progressText.textContent = 'Loading your claims...';
          
          const response = await fetch('/dashboard/claims');
          if (!response.ok) throw new Error('Failed to fetch claims');
          const claims = await response.json();
          
          // Complete progress animation
          progressFill.style.width = '100%';
          progressText.textContent = `Found ${claims.length} claims`;
          
          // Short delay to show completion
          setTimeout(() => {
            // Hide loading overlay and show dashboard
            loadingOverlay.style.display = 'none';
            dashboardContent.style.display = 'block';
            
            // Update claims list
            updateClaimsList(claims);
          }, 500);
          
        } catch (error) {
          console.error('Error loading claims:', error);
          progressText.textContent = 'Error loading claims. Please refresh the page.';
          progressFill.style.backgroundColor = '#dc3545';
        }
      }

      function updateClaimsList(claims) {
        const claimsList = document.querySelector('.claims-list');
        if (!claimsList) return;

        if (!claims.length) {
          claimsList.innerHTML = '<div class="no-claims">No claims found</div>';
          return;
        }

        claimsList.innerHTML = claims.map(claim => `
          <div class="claim-card" data-claim-id="${claim.claimId}">
            <div class="claim-header" onclick="toggleClaim(this.parentElement)">
              <div class="claim-title">
                <span class="status-dot" style="background-color: ${claim.status.color}"></span>
                ${claim.name}
              </div>
              <div class="claim-status" style="color: ${claim.status.color}">
                ${claim.status.status.toUpperCase()}
              </div>
              <i class="fas fa-chevron-down expand-icon"></i>
            </div>
            <div class="claim-content" style="display: none;">
              Click to load details
            </div>
          </div>
        `).join('');
      }

      async function loadClaimDetails(claimId, contentElement) {
        contentElement.innerHTML = '<div class="loading">Loading claim details...</div>';
        
        try {
          const response = await fetch(`/dashboard/claims/${claimId}`);
          if (!response.ok) throw new Error('Failed to fetch claim details');
          const details = await response.json();
          
          contentElement.innerHTML = `
            <div class="claim-details">
              <div class="info-group">
                <strong>Status:</strong> ${details.status.status}
              </div>
              ${details.customFields.map(field => `
                <div class="info-group">
                  <strong>${field.name}:</strong> ${field.value}
                </div>
              `).join('')}
            </div>
          `;
        } catch (error) {
          contentElement.innerHTML = '<div class="error">Error loading claim details</div>';
        }
      }

      window.toggleClaim = function(claimCard) {
        const content = claimCard.querySelector('.claim-content');
        const expandIcon = claimCard.querySelector('.expand-icon');
        const isExpanded = content.style.display !== 'none';
        
        expandIcon.style.transform = isExpanded ? 'rotate(0deg)' : 'rotate(180deg)';
        content.style.display = isExpanded ? 'none' : 'block';
        
        if (!isExpanded && content.innerHTML.includes('Click to load details')) {
          const claimId = claimCard.dataset.claimId;
          loadClaimDetails(claimId, content);
        }
      };
    });
  </script>

  <style>
    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .progress-bar-container {
      margin: 1rem 0;
      padding: 1rem;
      background: #f8f9fa;
      border-radius: 4px;
    }

    .progress-bar {
      height: 20px;
      background: #eee;
      border-radius: 10px;
      overflow: hidden;
    }

    .progress-fill {
      height: 100%;
      background: var(--primary-color);
      width: 0;
      transition: width 0.3s ease;
    }

    .progress-text {
      text-align: center;
      margin-top: 0.5rem;
      color: #666;
    }

    .progress-container {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(255, 255, 255, 0.9);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .progress-text {
      margin-bottom: 1rem;
      font-size: 1.2rem;
      color: var(--primary-color);
    }

    .progress-bar {
      width: 300px;
      height: 4px;
      background: #eee;
      border-radius: 2px;
      overflow: hidden;
    }

    .progress-bar-fill {
      height: 100%;
      background: var(--accent-color);
      width: 0;
      transition: width 0.3s ease;
    }

    .no-claims {
      text-align: center;
      padding: 2rem;
      color: #666;
      font-size: 1.1rem;
    }

    .progress-container {
      text-align: center;
      padding: 2rem;
      background: var(--card-bg);
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      margin: 2rem auto;
      max-width: 600px;
    }

    .progress-bar {
      height: 6px;
      background: var(--accent-blue);
      border-radius: 3px;
      width: 0;
      transition: width 0.3s ease;
      margin: 1rem 0;
    }

    .progress-text {
      color: var(--text-color);
      font-size: 1.1rem;
      margin-bottom: 1rem;
    }

    .status-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      display: inline-block;
      margin-right: 8px;
    }

    .claims-filters {
      margin-left: auto;
    }
    
    .status-filter {
      padding: 0.5rem 1rem;
      border: 1px solid var(--primary-light);
      border-radius: var(--border-radius);
      background: var(--card-bg);
      color: var(--text-color);
      font-family: 'Poppins', sans-serif;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .status-filter:hover {
      border-color: var(--primary-color);
    }
    
    .status-filter:focus {
      outline: none;
      border-color: var(--accent-blue);
      box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
    }
    
    .no-claims-message {
      text-align: center;
      padding: 2rem;
      background: var(--card-bg);
      border-radius: var(--border-radius);
      color: var(--text-color);
      font-size: 1.1rem;
    }

    /* List View Styles */
    .claims-list-view {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-top: 1rem;
    }

    .claim-list-item {
      display: grid;
      grid-template-columns: 4px 1fr auto auto;
      align-items: center;
      gap: 1rem;
      padding: 0.75rem 1rem;
      background: var(--card-bg);
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      text-decoration: none;
      color: var(--text-color);
      transition: var(--transition);
    }

    .claim-list-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(37, 53, 81, 0.1);
    }

    .claim-list-item .claim-status-indicator {
      height: 100%;
      width: 4px;
      border-radius: 2px;
      grid-row: 1;
      grid-column: 1;
    }

    .claim-list-item .claim-name {
      font-weight: 500;
      grid-column: 2;
    }

    .claim-list-item .claim-status {
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.7rem;
      font-weight: 500;
      color: white;
      grid-column: 3;
    }

    .claim-list-item .claim-id {
      font-size: 0.8rem;
      color: #666;
      grid-column: 4;
    }

    /* Make stat cards look clickable */
    .stat-card {
      cursor: pointer;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      position: relative;
    }
    
    .stat-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 24px rgba(37, 53, 81, 0.15);
    }
    
    .stat-card:active {
      transform: translateY(-1px);
    }
    
    /* Style for active stat card */
    .stat-card.active {
      border: 2px solid var(--primary-color);
      box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
    }
    
    .stat-card.active::after {
      content: '';
      position: absolute;
      bottom: -8px;
      left: 50%;
      transform: translateX(-50%);
      width: 0;
      height: 0;
      border-left: 8px solid transparent;
      border-right: 8px solid transparent;
      border-top: 8px solid var(--primary-color);
    }

    /* Search bar styles */
    .claims-filters {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-left: auto;
    }
    
    .search-container {
      position: relative;
      width: 250px;
    }
    
    .search-input {
      width: 100%;
      padding: 0.5rem 1rem 0.5rem 2.5rem;
      border: 1px solid var(--primary-light);
      border-radius: var(--border-radius);
      background: var(--card-bg);
      color: var(--text-color);
      font-family: 'Poppins', sans-serif;
      transition: var(--transition);
    }
    
    .search-input:focus {
      outline: none;
      border-color: var(--accent-blue);
      box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
    }
    
    .search-icon {
      position: absolute;
      left: 0.75rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--primary-light);
      pointer-events: none;
    }
    
    .search-input:focus + .search-icon {
      color: var(--primary-color);
    }
  </style>
</body>
</html> 