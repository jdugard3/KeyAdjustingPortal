<%- include('partials/header') %>

<!-- Add loading overlay -->
<div id="loadingOverlay" class="loading-overlay" style="display: flex;">
  <div class="loading-content">
    <div class="key-animation">
      <div class="key">
        <div class="key-head"></div>
        <div class="key-shaft"></div>
        <div class="key-teeth">
          <div class="tooth"></div>
          <div class="tooth"></div>
          <div class="tooth"></div>
        </div>
      </div>
      <div class="keyhole">
        <div class="keyhole-top"></div>
        <div class="keyhole-bottom"></div>
      </div>
    </div>
    <h2 class="loading-text">Loading Reports</h2>
    <div class="loading-progress">
      <div class="progress-bar">
        <div id="progressFill" class="progress-fill"></div>
      </div>
      <p id="progressText" class="loading-subtext">Fetching claim data...</p>
    </div>
  </div>
</div>

<div id="reportsContent" class="container" style="display: none;">
  <div class="reports-page">
    <h1><i class="fas fa-chart-bar"></i> Reports</h1>
    
    <div class="report-actions card">
      <h2>Generate Reports</h2>
      <p>Generate a comprehensive CSV report of all your active claims with detailed information.</p>
      
      <button id="generateActiveClaimsReport" class="btn btn-primary btn-lg">
        <i class="fas fa-file-csv"></i> Create Active Claims Report
      </button>
      
      <div id="reportStatus" class="report-status" style="display: none;">
        <div class="spinner">
          <i class="fas fa-spinner fa-spin"></i>
        </div>
        <span id="statusText">Generating report...</span>
      </div>
    </div>
  </div>
</div>

<script>
// Show loading overlay immediately
document.addEventListener('DOMContentLoaded', function() {
  const loadingOverlay = document.getElementById('loadingOverlay');
  const reportsContent = document.getElementById('reportsContent');
  const progressFill = document.getElementById('progressFill');
  const progressText = document.getElementById('progressText');
  const generateBtn = document.getElementById('generateActiveClaimsReport');
  const reportStatus = document.getElementById('reportStatus');
  const statusText = document.getElementById('statusText');

  // Start with loading overlay visible and content hidden
  loadingOverlay.style.display = 'flex';
  reportsContent.style.display = 'none';

  // Simulate progress while data is loading
  let progress = 0;
  const progressInterval = setInterval(() => {
    if (progress < 90) {  // Only go up to 90% until content is actually loaded
      progress += 10;
      progressFill.style.width = `${progress}%`;
      progressText.textContent = `Loading claims data... ${progress}%`;
    }
  }, 200);

  // When the window is fully loaded (including all content)
  window.addEventListener('load', function() {
    clearInterval(progressInterval);
    progressFill.style.width = '100%';
    progressText.textContent = 'Complete!';
    
    // Short delay before showing content
    setTimeout(() => {
      loadingOverlay.style.display = 'none';
      reportsContent.style.display = 'block';
    }, 500);
  });

  // Handle report generation
  generateBtn.addEventListener('click', async function() {
    // Show loading state
    generateBtn.disabled = true;
    reportStatus.style.display = 'flex';
    statusText.textContent = 'Generating report...';

    try {
      // Call the API to generate the report
      const response = await fetch('/reports/active-claims-csv', {
        method: 'POST'
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate report');
      }

      // Get the blob from the response
      const blob = await response.blob();
      
      // Create a download link and trigger it
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = `active_claims_report_${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      
      // Update status
      statusText.textContent = 'Report generated successfully!';
      setTimeout(() => {
        reportStatus.style.display = 'none';
        generateBtn.disabled = false;
      }, 3000);
      
    } catch (error) {
      console.error('Error generating report:', error);
      statusText.textContent = `Error: ${error.message}`;
      setTimeout(() => {
        reportStatus.style.display = 'none';
        generateBtn.disabled = false;
      }, 5000);
    }
  });
});
</script>

<style>
.reports-page {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.report-actions {
  background: var(--card-bg);
  border-radius: var(--border-radius);
  padding: 2rem;
  box-shadow: var(--box-shadow);
  text-align: center;
}

.report-actions h2 {
  color: var(--primary-color);
  margin-bottom: 1rem;
}

.report-actions p {
  margin-bottom: 2rem;
  color: var(--text-color);
  font-size: 1.1rem;
}

.btn-lg {
  padding: 1rem 2rem;
  font-size: 1.2rem;
}

.report-status {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 2rem;
  padding: 1rem;
  background: rgba(0,0,0,0.05);
  border-radius: var(--border-radius);
}

.spinner {
  margin-right: 1rem;
  font-size: 1.5rem;
  color: var(--primary-color);
}
</style>

<%- include('partials/footer') %> 